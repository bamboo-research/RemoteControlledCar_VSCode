; PlatformIO Project Configuration File
;
;   Build options: build flags, source filter
;   Upload options: custom upload port, speed and extra flags
;   Library options: dependencies, extra library storages
;   Advanced options: extra scripting
;
; Please visit documentation for the other options and examples
; http://docs.platformio.org/page/projectconf.html

[platformio]
; set 1 of the 4 following environments to compile and upload the desired context.
; env:RCC_Bekir needs to be created when project is implemented. RRCTest_Car for now tests Car Able
env_default = RCC_Able ; RCC_Controller , RRCTest_Controller , RRCTest_Car , RCC_Able ; RRCLibTest_Bluetooth
lib_extra_dirs = external-libs

[env:RCC_Able]
; for final Able Car running on Arduino UNO
platform = atmelavr
board = uno
framework = arduino
; src_filter =  +<*> -<.git/> -<lib/RCC_Bekir> -<lib/RCC_Controller> -<lib/RRCTest_Car> -<lib/RRCTest_Controller>
build_flags = -DRCC_ABLE

[env:RCC_Controller]
; for final Remote Controller running on Arduino NANO
platform = atmelavr
board = nanoatmega328
framework = arduino
build_flags = -DRCC_CONTROLLER

[env:RRCTest_Controller]
; for testing with serial monitoring of Remote Controller running on Arduino NANO
platform = atmelavr
board = nanoatmega328
framework = arduino
build_flags = -DTEST_CONTROLLER -DUSE_THREAD_NAMES

[env:RRCTest_Car]
; for testing with serial monitoring of [for now, Able] Car running on Arduino UNO
platform = atmelavr
board = uno
framework = arduino
build_flags = -DTEST_CAR -DUSE_THREAD_NAMES

[env:RRCLibTest_Bluetooth]
platform = atmelavr
board = uno ; uno , nanoatmega328
framework = arduino
build_flags = -DTEST_BT_UNO ; -DTEST_BT_UNO , -DTEST_BT_NANO
